{"version":3,"sources":["../../src/modules/dockerEvents.js"],"names":["NANOSECONDS","DEFAULT_OPTIONS","format","CMD","DockerEvents","init","options","cmdOptions","cmd","concat","join","buffer","ps","stdout","setEncoding","on","data","push","jsonString","json","_tryParse","length","_parseEventData","code","_onExit","process","_onDisconnect","kill","connected","send","type","message","jsonData","Action","Actor","from","id","scope","status","timeNano","Type","eventType","image","timeStamp","Date","detail","actor","text","JSON","parse","e","module","exports"],"mappings":";;AAAA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,cAAc,OAApB;AACA,MAAMC,kBAAkB;AACpBC,YAAQ;AADY,CAAxB;;AAIA,MAAMC,MAAM,eAAZ;;AAEA,MAAMC,eAAe;AACjB;;;AAGAC,SAAKC,UAAU,EAAf,EAAmB;AACf,cAAMC,aAAa,yBAAU,EAAV,EAAcN,eAAd,EAA+BK,OAA/B,CAAnB;AACA,cAAME,MAAM,CAACL,GAAD,EAAMM,MAAN,CAAa,iCAAiBF,UAAjB,CAAb,EAA2CG,IAA3C,CAAgD,GAAhD,CAAZ;AACA,cAAMC,SAAS,EAAf;;AAEA,cAAMC,KAAK,yBAAKJ,GAAL,CAAX;AACAI,WAAGC,MAAH,CAAUC,WAAV,CAAsB,OAAtB;AACAF,WAAGC,MAAH,CAAUE,EAAV,CAAa,MAAb,EAAsBC,IAAD,IAAU;AAC3BL,mBAAOM,IAAP,CAAYD,IAAZ;AACA,kBAAME,aAAaP,OAAOD,IAAP,CAAY,EAAZ,CAAnB;AACA,kBAAMS,OAAO,KAAKC,SAAL,CAAeF,UAAf,CAAb;AACA,gBAAIC,IAAJ,EAAU;AACNR,uBAAOU,MAAP,GAAgB,CAAhB;AACA,qBAAKC,eAAL,CAAqBH,IAArB;AACH;AACJ,SARD;;AAUA;AACAP,WAAGG,EAAH,CAAM,MAAN,EAAeQ,IAAD,IAAU,KAAKC,OAAL,CAAaD,IAAb,EAAmBf,GAAnB,CAAxB;;AAEA;AACAiB,gBAAQV,EAAR,CAAW,YAAX,EAAyB,MAAM,KAAKW,aAAL,EAA/B;;AAEA,aAAKD,OAAL,GAAeb,EAAf;AACH,KA5BgB;;AA8BjBc,oBAAgB;AACZ,aAAKD,OAAL,CAAaE,IAAb;AACA,aAAKF,OAAL,GAAe,IAAf;AACH,KAjCgB;;AAmCjB;;;;;AAKAD,YAAQD,IAAR,EAAcf,GAAd,EAAmB;AACf,YAAIe,SAAS,CAAT,IAAcE,QAAQG,SAA1B,EAAqC;AACjCH,oBAAQI,IAAR,CAAa;AACTC,sBAAM,OADG;AAETC,yBAAU,8BAA8BvB,GAAK;AAFpC,aAAb;AAIH;AACJ,KA/CgB;AAgDjB;;;;AAIAc,oBAAgBU,QAAhB,EAA0B;AACtB,YAAI,CAACA,QAAL,EAAe;AACX;AACH;;AAED,cAAM;AACFC,kBADE;AAEFC,oBAAQ,EAFN;AAGFC,mBAAO,IAHL;AAIFC,iBAAK,IAJH;AAKFC,oBAAQ,IALN;AAMFC,kBANE;AAOFC,oBAPE;AAQFC;AARE,YASFR,QATJ;;AAWA,cAAMS,YAAa,GAAED,IAAK,IAAGP,MAAO,EAApC;;AAEAR,gBAAQI,IAAR,CAAa;AACTa,mBAAOP,IADE;AAETQ,uBAAW,IAAIC,IAAJ,CAASL,WAAWvC,WAApB,CAFF;AAGT8B,kBAAMW,SAHG;AAITH,kBAJS;AAKTO,oBAAQ;AACJT,kBADI;AAEJC,qBAFI;AAGJS,uBAAOZ;AAHH;AALC,SAAb;AAWH,KAjFgB;;AAmFjB;;;;;AAKAd,cAAU2B,IAAV,EAAgB;AACZ,YAAI;AACA,mBAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACH,SAFD,CAEE,OAAOG,CAAP,EAAU;AACR,mBAAO,IAAP;AACH;AACJ;AA9FgB,CAArB;;AAkGAzB,QAAQV,EAAR,CAAW,SAAX,EAAuBT,OAAD,IAAa;AAC/BF,iBAAaC,IAAb,CAAkBC,OAAlB;AACH,CAFD;;AAIA6C,OAAOC,OAAP,GAAiBhD,YAAjB","file":"dockerEvents.js","sourcesContent":["import { exec } from 'child_process';\nimport serializeOptions from '../utils/optionsSerializer';\nimport deepMerge from '../utils/deepMerge';\n\nconst NANOSECONDS = 1000000;\nconst DEFAULT_OPTIONS = {\n    format: '{{json .}}'\n};\n\nconst CMD = 'docker events';\n\nconst DockerEvents = {\n    /**\n     * @param {Object} [options]\n     */\n    init(options = {}) {\n        const cmdOptions = deepMerge({}, DEFAULT_OPTIONS, options);\n        const cmd = [CMD].concat(serializeOptions(cmdOptions)).join(' ');\n        const buffer = [];\n\n        const ps = exec(cmd);\n        ps.stdout.setEncoding('utf-8');\n        ps.stdout.on('data', (data) => {\n            buffer.push(data);\n            const jsonString = buffer.join('');\n            const json = this._tryParse(jsonString);\n            if (json) {\n                buffer.length = 0;\n                this._parseEventData(json);\n            }\n        });\n\n        //Handle sub-process exit\n        ps.on('exit', (code) => this._onExit(code, cmd));\n\n        //Handle forked process disconnect\n        process.on('disconnect', () => this._onDisconnect());\n\n        this.process = ps;\n    },\n\n    _onDisconnect() {\n        this.process.kill();\n        this.process = null;\n    },\n\n    /**\n     * @param {Number} code\n     * @param {String} cmd\n     * @private\n     */\n    _onExit(code, cmd) {\n        if (code !== 0 && process.connected) {\n            process.send({\n                type: 'error',\n                message: `Error executing sub-child: ${ cmd }`\n            });\n        }\n    },\n    /**\n     * @param {Object} jsonData\n     * @private\n     */\n    _parseEventData(jsonData) {\n        if (!jsonData) {\n            return;\n        }\n\n        const {\n            Action,\n            Actor = {},\n            from = null,\n            id = null,\n            scope = null,\n            status,\n            timeNano,\n            Type,\n        } = jsonData;\n\n        const eventType = `${Type}.${Action}`;\n\n        process.send({\n            image: from,\n            timeStamp: new Date(timeNano / NANOSECONDS),\n            type: eventType,\n            status,\n            detail: {\n                id,\n                scope,\n                actor: Actor\n            }\n        });\n    },\n\n    /**\n     * @param {String} text\n     * @return {?Object}\n     * @private\n     */\n    _tryParse(text) {\n        try {\n            return JSON.parse(text);\n        } catch (e) {\n            return null;\n        }\n    }\n};\n\n\nprocess.on('message', (options) => {\n    DockerEvents.init(options);\n});\n\nmodule.exports = DockerEvents;\n\n"]}