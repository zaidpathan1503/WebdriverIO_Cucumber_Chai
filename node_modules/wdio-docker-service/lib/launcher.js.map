{"version":3,"sources":["../src/launcher.js"],"names":["DEFAULT_LOG_FILENAME","DockerLauncher","constructor","logToStdout","docker","dockerLogs","onPrepare","config","debug","coloredLogs","dockerOptions","args","command","healthCheck","image","options","onDockerReady","Promise","reject","Error","Logger","require","console","Docker","once","_redirectLogStream","run","then","catch","err","error","message","onComplete","stop","logFile","fs","ensureFileSync","logStream","createWriteStream","flags","process","stdout","pipe","stderr","module","exports"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,uBAAuB,gBAA7B;;AAEA,MAAMC,cAAN,CAAqB;AACjBC,kBAAc;AACV,aAAKC,WAAL,GAAmB,KAAnB;AACA,aAAKC,MAAL,GAAc,IAAd;AACA,aAAKC,UAAL,GAAkB,IAAlB;AACH;;AAEDC,cAAUC,MAAV,EAAkB;AACd,aAAKJ,WAAL,GAAmBI,OAAOJ,WAA1B;AACA,aAAKE,UAAL,GAAkBE,OAAOF,UAAzB;;AAEA,cAAM;AACFG,iBADE;AAEFC,uBAFE;AAGFC,2BAAe;AACXC,oBADW;AAEXC,uBAFW;AAGXC,2BAHW;AAIXC,qBAJW;AAKXC;AALW,aAHb;AAUFC;AAVE,YAWFT,MAXJ;;AAaA,YAAI,CAACO,KAAL,EAAY;AACR,mBAAOG,mBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,4CAAV,CAAf,CAAP;AACH;;AAED,cAAMC,SAASX,cAAcY,QAAQ,qBAAR,CAAd,GAA+CC,OAA9D;;AAEA,aAAKlB,MAAL,GAAc,IAAImB,gBAAJ,CAAWT,KAAX,EAAkB;AAC5BH,gBAD4B;AAE5BC,mBAF4B;AAG5BJ,iBAH4B;AAI5BK,uBAJ4B;AAK5BE;AAL4B,SAAlB,EAMXK,MANW,CAAd;;AAQA,YAAI,OAAO,KAAKf,UAAZ,KAA2B,QAA/B,EAAyC;AACrC,iBAAKD,MAAL,CAAYoB,IAAZ,CAAiB,gBAAjB,EAAmC,MAAM;AACrC,qBAAKC,kBAAL;AACH,aAFD;AAGH;;AAED,eAAO,KAAKrB,MAAL,CAAYsB,GAAZ,GACFC,IADE,CACG,MAAM;AACR,gBAAI,OAAOX,aAAP,KAAyB,UAA7B,EAAyC;AACrCA;AACH;AACJ,SALE,EAMFY,KANE,CAMKC,GAAD,IAAS;AACZrB,qBAASY,OAAOU,KAAP,CAAc,4BAA4BD,IAAIE,OAAS,EAAvD,CAAT;AACH,SARE,CAAP;AASH;;AAEDC,iBAAa;AACT,YAAI,KAAK5B,MAAT,EAAiB;AACb,mBAAO,KAAKA,MAAL,CAAY6B,IAAZ,EAAP;AACH;AACJ;;AAEDR,yBAAqB;AACjB,cAAMS,UAAU,2BAAY,KAAK7B,UAAjB,EAA6BL,oBAA7B,CAAhB;;AAEA;AACAmC,0BAAGC,cAAH,CAAkBF,OAAlB;;AAEA,cAAMG,YAAYF,kBAAGG,iBAAH,CAAqBJ,OAArB,EAA8B,EAAEK,OAAO,GAAT,EAA9B,CAAlB;;AAEA,aAAKnC,MAAL,CAAYoC,OAAZ,CAAoBC,MAApB,CAA2BC,IAA3B,CAAgCL,SAAhC;AACA,aAAKjC,MAAL,CAAYoC,OAAZ,CAAoBG,MAApB,CAA2BD,IAA3B,CAAgCL,SAAhC;AACH;AAvEgB;;AA0ErBO,OAAOC,OAAP,GAAiB5C,cAAjB","file":"launcher.js","sourcesContent":["import fs from 'fs-extra';\nimport Docker from './utils/docker';\nimport getFilePath from './utils/getFilePath';\nimport Promise from 'bluebird';\n\nconst DEFAULT_LOG_FILENAME = 'docker-log.txt';\n\nclass DockerLauncher {\n    constructor() {\n        this.logToStdout = false;\n        this.docker = null;\n        this.dockerLogs = null;\n    }\n\n    onPrepare(config) {\n        this.logToStdout = config.logToStdout;\n        this.dockerLogs = config.dockerLogs;\n\n        const {\n            debug,\n            coloredLogs,\n            dockerOptions: {\n                args,\n                command,\n                healthCheck,\n                image,\n                options,\n            },\n            onDockerReady\n        } = config;\n\n        if (!image) {\n            return Promise.reject(new Error('dockerOptions.image is a required property'));\n        }\n\n        const Logger = coloredLogs ? require('./utils/colorLogger') : console;\n\n        this.docker = new Docker(image, {\n            args,\n            command,\n            debug,\n            healthCheck,\n            options,\n        }, Logger);\n\n        if (typeof this.dockerLogs === 'string') {\n            this.docker.once('processCreated', () => {\n                this._redirectLogStream();\n            });\n        }\n\n        return this.docker.run()\n            .then(() => {\n                if (typeof onDockerReady === 'function') {\n                    onDockerReady();\n                }\n            })\n            .catch((err) => {\n                debug && Logger.error(`Failed to run container: ${ err.message }`);\n            });\n    }\n\n    onComplete() {\n        if (this.docker) {\n            return this.docker.stop();\n        }\n    }\n\n    _redirectLogStream() {\n        const logFile = getFilePath(this.dockerLogs, DEFAULT_LOG_FILENAME);\n\n        // ensure file & directory exists\n        fs.ensureFileSync(logFile);\n\n        const logStream = fs.createWriteStream(logFile, { flags: 'w' });\n\n        this.docker.process.stdout.pipe(logStream);\n        this.docker.process.stderr.pipe(logStream);\n    }\n}\n\nmodule.exports = DockerLauncher;\n"]}