{"version":3,"sources":["../../src/utils/docker.js"],"names":["SPACE","INSPECT_DOCKER_INTERVAL","MAX_INSPECT_ATTEMPTS","DEFAULT_OPTIONS","rm","Docker","EventEmitter","constructor","image","debug","options","healthCheck","command","args","logger","console","Error","cidfile","path","join","process","cwd","replace","Boolean","dockerEventsListener","DockerEventsListener","url","cmdChain","concat","push","dockerRunCommand","run","log","connect","filter","once","event","info","JSON","stringify","_removeStaleContainer","then","_isImagePresent","catch","warn","_pullImage","emit","stdout","on","data","stderr","error","_reportWhenDockerIsRunning","err","code","Promise","resolve","stop","kill","disconnect","maxRetries","inspectInterval","startDelay","undefined","delay","reject","attempts","pollstatus","poll","clearTimeout","setTimeout","fs","readFile","cid","stopContainer","removeContainer","remove"],"mappings":"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","file":"docker.js","sourcesContent":["import deepMerge from './deepMerge';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport Ping from './ping';\nimport { runCommand, runProcess } from './childProcess';\nimport { EventEmitter } from 'events';\nimport serializeOptions from './optionsSerializer';\nimport Promise from 'bluebird';\nimport DockerEventsListener from './dockerEventsListener';\n\nconst SPACE = ' ';\nconst INSPECT_DOCKER_INTERVAL = 500;\nconst MAX_INSPECT_ATTEMPTS = 10;\nconst DEFAULT_OPTIONS = {\n    rm: true\n};\n\n/**\n * @class {Docker} Provides functionality to run docker container\n */\nclass Docker extends EventEmitter {\n    /**\n     * @param {String} image Docker image/tag name\n     * @param {Boolean} [debug] Enables logging\n     * @param {Object} [options] Docker run options\n     * @param {String|Object} [healthCheck] Url that verifies that service is running\n     * @param {String} [command] docker command that follows image/tag name\n     * @param {String} [args] docker args that follow image/tag name\n     * @param {Object} logger Color logger or console\n     */\n    constructor(image, { debug = false, options = {}, healthCheck = {}, command, args } = {}, logger = console) {\n        super();\n\n        if (!image) {\n            throw new Error('Missing required image argument');\n        }\n\n        this.args = args;\n        this.cidfile = path.join(process.cwd(), `${ image.replace(/\\W+/g, '_') }.cid`);\n        this.command = command;\n        this.debug = Boolean(debug);\n        this.healthCheck = healthCheck;\n        this.image = image;\n        this.logger = logger;\n        this.process = null;\n        this.dockerEventsListener = new DockerEventsListener(debug, logger);\n\n        if (typeof healthCheck === 'string') {\n            this.healthCheck = { url: healthCheck };\n        }\n\n        this.options = deepMerge({\n            cidfile: this.cidfile\n        }, DEFAULT_OPTIONS, options);\n\n        const cmdChain = ['docker run'].concat(serializeOptions(this.options), [this.image]);\n\n        if (this.command) {\n            cmdChain.push(this.command);\n        }\n\n        if (this.args) {\n            cmdChain.push(this.args);\n        }\n\n        this.dockerRunCommand = cmdChain.join(SPACE);\n    }\n\n    /**\n     * @return {Promise}\n     */\n    run() {\n        this.debug && this.logger.log(`Docker command: ${ this.dockerRunCommand }`);\n        this.dockerEventsListener.connect({\n            filter: `image=${this.image}`\n        });\n\n        if (this.debug) {\n            this.dockerEventsListener.once('image.pull', (event) => {\n                this.logger.info('Pulling image:', JSON.stringify(event, null, 4));\n            });\n        }\n\n        return this._removeStaleContainer()\n            .then(() => {\n                return this._isImagePresent()\n                    .catch(() => {\n                        this.logger.warn('NOTE: Pulling image for the first time. Please be patient.');\n                        return this._pullImage();\n                    });\n            })\n            .then(() => {\n                this.debug && this.logger.info(`Launching docker image '${ this.image }'`);\n                return runProcess(this.dockerRunCommand);\n            })\n            .then(process => {\n                this.process = process;\n                this.emit('processCreated');\n\n                if (this.debug) {\n                    this.process.stdout.on('data', (data) => {\n                        this.logger.log(data);\n                    });\n\n                    this.process.stderr.on('data', (data) => {\n                        this.logger.error(data);\n                    });\n\n                    this.dockerEventsListener.once('container.start', (event) => {\n                        this.logger.info('Container started:', JSON.stringify(event, null, 4));\n                    });\n\n                    this.dockerEventsListener.once('container.stop', (event) => {\n                        this.logger.info('Container stopped:', JSON.stringify(event, null, 4));\n                    });\n                }\n\n                return this._reportWhenDockerIsRunning()\n                    .then(() => {\n                        this.debug && this.logger.info('Docker container is ready');\n                        return process;\n                    });\n            })\n            .catch((err) => {\n                if (err.code === 'ENOENT') {\n                    return Promise.resolve();\n                }\n\n                throw err;\n            });\n    }\n\n    /**\n     * @return {Promise}\n     */\n    stop() {\n        return this._removeStaleContainer()\n            .then(() => {\n                if (this.process) {\n                    this.process.kill();\n                    this.process = null;\n                }\n\n                this.debug && this.logger.info('Docker container has stopped');\n                this.dockerEventsListener.disconnect();\n            });\n    }\n\n    /**\n     * Polls for availability of application running in a docker\n     * @return {Promise<any>}\n     * @private\n     */\n    _reportWhenDockerIsRunning() {\n        const {\n            url,\n            maxRetries = MAX_INSPECT_ATTEMPTS,\n            inspectInterval = INSPECT_DOCKER_INTERVAL,\n            startDelay = 0\n        } = this.healthCheck;\n\n        if (url === undefined) {\n            return Promise.resolve();\n        }\n\n        return Promise.delay(startDelay)\n            .then(() => new Promise((resolve, reject) => {\n                let attempts = 0;\n                let pollstatus = null;\n\n                const poll = () => {\n                    Ping(url)\n                        .then(() => {\n                            resolve();\n                            clearTimeout(pollstatus);\n                            pollstatus = null;\n                        })\n                        .catch((err) => {\n                            attempts++;\n                            if (attempts >= maxRetries) {\n                                clearTimeout(pollstatus);\n                                pollstatus = null;\n                                reject(err);\n                                return;\n                            }\n\n                            pollstatus = setTimeout(poll, inspectInterval);\n                        });\n                };\n\n                pollstatus = setTimeout(poll, inspectInterval);\n            }));\n    }\n\n    /**\n     * @return {Promise}\n     * @private\n     */\n    _isImagePresent() {\n        return runCommand(`docker inspect ${ this.image }`);\n    }\n\n    /**\n     * @return {Promise}\n     * @private\n     */\n    _pullImage() {\n        return runCommand(`docker pull ${ this.image }`);\n    }\n\n    /**\n     * Removes any stale docker image\n     * @return {Promise}\n     * @private\n     */\n    _removeStaleContainer() {\n        return fs.readFile(this.cidfile)\n            .then((cid) => {\n                this.debug && this.logger.info('Shutting down running container');\n                return Docker.stopContainer(cid).then(() => Docker.removeContainer(cid));\n            })\n            .catch(() => Promise.resolve())\n            .then(() => {\n                this.debug && this.logger.info('Cleaning up CID files');\n                return fs.remove(this.cidfile);\n            });\n    }\n\n    /**\n     * @static\n     * @param {String} cid Container id\n     * @return {Promise}\n     */\n    static stopContainer(cid) {\n        return runCommand(`docker stop ${ cid }`);\n    }\n\n    /**\n     * @static\n     * @param {String} cid Container id\n     * @return {Promise}\n     */\n    static removeContainer(cid) {\n        return runCommand(`docker rm ${ cid }`);\n    }\n}\n\n\nexport default Docker;\n"]}