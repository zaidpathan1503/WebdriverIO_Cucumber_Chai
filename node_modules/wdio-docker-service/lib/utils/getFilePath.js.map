{"version":3,"sources":["../../src/utils/getFilePath.js"],"names":["getFilePath","FILE_EXTENSION_REGEX","filePath","defaultFilename","absolutePath","path","resolve","test","basename","join"],"mappings":";;;;;kBAUwBA,W;;AAVxB;;;;;;AAEA,MAAMC,uBAAuB,eAA7B;;AAEA;;;;;;AAMe,SAASD,WAAT,CAAqBE,QAArB,EAA+BC,eAA/B,EAAgD;AAC3D,QAAIC,eAAeC,eAAKC,OAAL,CAAaJ,QAAb,CAAnB;;AAEA;AACA;AACA,QAAI,CAACD,qBAAqBM,IAArB,CAA0BF,eAAKG,QAAL,CAAcJ,YAAd,CAA1B,CAAL,EAA6D;AACzDA,uBAAeC,eAAKI,IAAL,CAAUL,YAAV,EAAwBD,eAAxB,CAAf;AACH;;AAED,WAAOC,YAAP;AACH","file":"getFilePath.js","sourcesContent":["import path from 'path';\n\nconst FILE_EXTENSION_REGEX = /\\.[0-9a-z]+$/i;\n\n/**\n * Resolves the given path into a absolute path and appends the default filename as fallback when the provided path is a directory.\n * @param  {String} filePath         relative file or directory path\n * @param  {String} defaultFilename default file name when filePath is a directory\n * @return {String}                 absolute file path\n */\nexport default function getFilePath(filePath, defaultFilename) {\n    let absolutePath = path.resolve(filePath);\n\n    // test if we already have a file (e.g. selenium.txt, .log, log.txt, etc.)\n    // NOTE: path.extname doesn\"t work to detect a file, cause dotfiles are reported by node to have no extension\n    if (!FILE_EXTENSION_REGEX.test(path.basename(absolutePath))) {\n        absolutePath = path.join(absolutePath, defaultFilename);\n    }\n\n    return absolutePath;\n}\n"]}