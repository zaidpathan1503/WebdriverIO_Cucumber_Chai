{"version":3,"sources":["../../src/utils/optionsSerializer.js"],"names":["serializeOptions","serializeOption","sanitizeValue","RX_SPACES","opt","Object","keys","reduce","acc","key","fixedKey","value","option","Array","isArray","concat","push","prefix","length","item","process","platform","replace"],"mappings":";;;;;QAQgBA,gB,GAAAA,gB;QAoBAC,e,GAAAA,e;QAuBAC,a,GAAAA,a;;AAnDhB;;;;;;AAEA,MAAMC,YAAY,OAAlB;AACA;;;;;AAKO,SAASH,gBAAT,CAA0BI,GAA1B,EAA+B;AAClC,WAAOC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzC,cAAMC,WAAW,2BAAYD,GAAZ,CAAjB;AACA,cAAME,QAAQT,cAAcE,IAAIK,GAAJ,CAAd,CAAd;AACA,cAAMG,SAASX,gBAAgBS,QAAhB,EAA0BC,KAA1B,CAAf;AACA,YAAIC,MAAJ,EAAY;AACR,gBAAIC,MAAMC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACvB,uBAAOJ,IAAIO,MAAJ,CAAWH,MAAX,CAAP;AACH;AACDJ,gBAAIQ,IAAJ,CAASJ,MAAT;AACH;AACD,eAAOJ,GAAP;AACH,KAXM,EAWJ,EAXI,CAAP;AAYH;;AAED;;;;;AAKO,SAASP,eAAT,CAAyBQ,GAAzB,EAA8BE,KAA9B,EAAqC;AACxC,UAAMM,SAASR,IAAIS,MAAJ,GAAa,CAAb,GAAiB,IAAjB,GAAwB,GAAvC;;AAEA,QAAI,OAAOP,KAAP,KAAiB,SAAjB,IAA8BA,KAAlC,EAAyC;AACrC,eAAO,CAAE,GAAEM,MAAO,GAAER,GAAI,EAAjB,CAAP;AACH;;AAED,QAAI,OAAOE,KAAP,KAAiB,QAArB,EAA+B;AAC3B,eAAO,CAAE,GAAEM,MAAO,GAAER,GAAI,IAAGE,KAAM,EAA1B,CAAP;AACH;;AAED,QAAIE,MAAMC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACtB,eAAOA,MAAMJ,MAAN,CAAa,CAACC,GAAD,EAAMW,IAAN,KAAe;AAC/BX,gBAAIQ,IAAJ,CAAU,GAAEC,MAAO,GAAER,GAAI,IAAGU,IAAK,EAAjC;AACA,mBAAOX,GAAP;AACH,SAHM,EAGJ,EAHI,CAAP;AAIH;AACJ;;AAED;;;;AAIO,SAASN,aAAT,CAAuBS,KAAvB,EAA8B;AACjC,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,eAAOA,KAAP;AACH;AACD,WAAOS,QAAQC,QAAR,KAAqB,OAArB,GAA+BV,KAA/B,GAAuCA,MAAMW,OAAN,CAAcnB,SAAd,EAAyB,KAAzB,CAA9C;AACH;;kBAEcH,gB","file":"optionsSerializer.js","sourcesContent":["import camelToDash from './camelToDash';\n\nconst RX_SPACES = /(\\s)/g;\n/**\n * @param {Object} opt Options to serialize\n * @return {Array}\n */\n\nexport function serializeOptions(opt) {\n    return Object.keys(opt).reduce((acc, key) => {\n        const fixedKey = camelToDash(key);\n        const value = sanitizeValue(opt[key]);\n        const option = serializeOption(fixedKey, value);\n        if (option) {\n            if (Array.isArray(option)) {\n                return acc.concat(option);\n            }\n            acc.push(option);\n        }\n        return acc;\n    }, []);\n}\n\n/**\n * @param {String} key\n * @param {*} value\n * @return {Array}\n */\nexport function serializeOption(key, value) {\n    const prefix = key.length > 1 ? '--' : '-';\n\n    if (typeof value === 'boolean' && value) {\n        return [`${prefix}${key}`];\n    }\n\n    if (typeof value === 'string') {\n        return [`${prefix}${key} ${value}`];\n    }\n\n    if (Array.isArray(value)) {\n        return value.reduce((acc, item) => {\n            acc.push(`${prefix}${key} ${item}`);\n            return acc;\n        }, []);\n    }\n}\n\n/**\n * @param {*} value\n * @return {void | string | *}\n */\nexport function sanitizeValue(value) {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    return process.platform === 'win32' ? value : value.replace(RX_SPACES, '\\\\ ');\n}\n\nexport default serializeOptions;\n"]}