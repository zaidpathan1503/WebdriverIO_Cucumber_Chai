{"version":3,"sources":["../../src/utils/dockerEventsListener.js"],"names":["DOCKER_EVENTS_MODULE","path","resolve","__dirname","DockerEventsListener","EventEmitter","constructor","debug","logger","console","_subprocess","_onMessage","bind","_onError","connect","opt","disconnect","sps","on","send","warn","pid","connected","message","type","Error","emit","err","error"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,uBAAuBC,eAAKC,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8B,sBAA9B,CAA7B;;AAEA;;;;AAIA,MAAMC,oBAAN,SAAmCC,gBAAnC,CAAgD;AAC5C;;;;;AAKAC,gBAAYC,QAAQ,KAApB,EAA2BC,SAASC,OAApC,EAA6C;AACzC;;AAEA,aAAKF,KAAL,GAAaA,KAAb;AACA,aAAKC,MAAL,GAAcA,MAAd;AACA,aAAKE,WAAL,GAAmB,IAAnB;AACA,aAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAAlB;AACA,aAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACH;;AAED;;;AAGAE,YAAQC,MAAM,EAAd,EAAkB;AACd,aAAKC,UAAL;;AAEA,cAAMC,MAAM,yBAAKjB,oBAAL,CAAZ;AACAiB,YAAIC,EAAJ,CAAO,SAAP,EAAkB,KAAKP,UAAvB;AACAM,YAAIC,EAAJ,CAAO,OAAP,EAAgB,KAAKL,QAArB;AACAI,YAAIE,IAAJ,CAASJ,GAAT;;AAEA,aAAKR,KAAL,IAAc,KAAKC,MAAL,CAAYY,IAAZ,CAAiB,kCAAjB,EAAqDH,IAAII,GAAzD,CAAd;;AAEA,aAAKX,WAAL,GAAmBO,GAAnB;AACH;;AAEDD,iBAAa;AACT,YAAI,KAAKN,WAAL,IAAoB,KAAKA,WAAL,CAAiBY,SAAzC,EAAoD;AAChD,iBAAKf,KAAL,IAAc,KAAKC,MAAL,CAAYY,IAAZ,CAAiB,qCAAjB,EAAwD,KAAKV,WAAL,CAAiBW,GAAzE,CAAd;AACA,iBAAKX,WAAL,CAAiBM,UAAjB;AACH;AACD,aAAKN,WAAL,GAAmB,IAAnB;AACH;;AAED;;;;AAIAC,eAAWY,OAAX,EAAoB;AAChB,YAAI,YAAYA,QAAQC,IAAxB,EAA8B;AAC1B,iBAAKX,QAAL,CAAc,IAAIY,KAAJ,CAAUF,QAAQA,OAAlB,CAAd;AACA;AACH;;AAED,aAAKG,IAAL,CAAUH,QAAQC,IAAlB,EAAwBD,OAAxB;AACH;;AAEDV,aAASc,GAAT,EAAc;AACV,aAAKnB,MAAL,CAAYoB,KAAZ,CAAkBD,GAAlB;AACA,aAAKX,UAAL;AACH;AAxD2C;;kBA2DjCZ,oB","file":"dockerEventsListener.js","sourcesContent":["import EventEmitter from 'events';\nimport { fork } from 'child_process';\nimport path from 'path';\n\nconst DOCKER_EVENTS_MODULE = path.resolve(__dirname, '..', 'modules/dockerEvents');\n\n/**\n * @class DockerEventsListener\n * @extends {EventEmitter}\n */\nclass DockerEventsListener extends EventEmitter {\n    /**\n     * @constructor\n     * @param {Boolean} [debug]\n     * @param {ColorLogger} [logger]\n     */\n    constructor(debug = false, logger = console) {\n        super();\n\n        this.debug = debug;\n        this.logger = logger;\n        this._subprocess = null;\n        this._onMessage = this._onMessage.bind(this);\n        this._onError = this._onError.bind(this);\n    }\n\n    /**\n     * @param {Object} opt Command line options for 'docker events'\n     */\n    connect(opt = {}) {\n        this.disconnect();\n\n        const sps = fork(DOCKER_EVENTS_MODULE);\n        sps.on('message', this._onMessage);\n        sps.on('error', this._onError);\n        sps.send(opt);\n\n        this.debug && this.logger.warn('Connecting dockerEventsListener:', sps.pid);\n\n        this._subprocess = sps;\n    }\n\n    disconnect() {\n        if (this._subprocess && this._subprocess.connected) {\n            this.debug && this.logger.warn('Disconnecting dockerEventsListener:', this._subprocess.pid);\n            this._subprocess.disconnect();\n        }\n        this._subprocess = null;\n    }\n\n    /**\n     * @param {Object} message Event JSON\n     * @private\n     */\n    _onMessage(message) {\n        if ('error' === message.type) {\n            this._onError(new Error(message.message));\n            return;\n        }\n\n        this.emit(message.type, message);\n    }\n\n    _onError(err) {\n        this.logger.error(err);\n        this.disconnect();\n    }\n}\n\nexport default DockerEventsListener;\n\n\n\n"]}