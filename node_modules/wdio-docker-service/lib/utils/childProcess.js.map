{"version":3,"sources":["../../src/utils/childProcess.js"],"names":["runProcess","runCommand","SPACE","cmd","Promise","resolve","reject","commands","split","app","args","childProcess","on","err","process","nextTick","stdio","code","Error"],"mappings":";;;;;QAUgBA,U,GAAAA,U;QAqBAC,U,GAAAA,U;;AA/BhB;;AACA;;;;;;AAEA,MAAMC,QAAQ,GAAd;;AAEA;;;;;AAKO,SAASF,UAAT,CAAoBG,GAApB,EAAyB;AAC5B,WAAO,IAAIC,kBAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,cAAMC,WAAWJ,IAAIK,KAAJ,CAAUN,KAAV,CAAjB;AACA,cAAM,CAACO,GAAD,EAAM,GAAGC,IAAT,IAAiBH,QAAvB;AACA,cAAMI,eAAe,0BAAMF,GAAN,EAAWC,IAAX,CAArB;;AAEAC,qBAAaC,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAS;AAC9BP,mBAAOO,GAAP;AACH,SAFD;;AAIAC,gBAAQC,QAAR,CAAiB,MAAM;AACnBV,oBAAQM,YAAR;AACH,SAFD;AAGH,KAZM,CAAP;AAaH;;AAED;;;;;AAKO,SAASV,UAAT,CAAoBE,GAApB,EAAyB;AAC5B,WAAO,IAAIC,kBAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,cAAMC,WAAWJ,IAAIK,KAAJ,CAAUN,KAAV,CAAjB;AACA,cAAM,CAACO,GAAD,EAAM,GAAGC,IAAT,IAAiBH,QAAvB;AACA,cAAMI,eAAe,0BAAMF,GAAN,EAAWC,IAAX,EAAiB,EAAEM,OAAO,QAAT,EAAjB,CAArB;;AAEAL,qBAAaC,EAAb,CAAgB,OAAhB,EAA0BC,GAAD,IAAS;AAC9BP,mBAAOO,GAAP;AACH,SAFD;;AAIAF,qBAAaC,EAAb,CAAgB,OAAhB,EAA0BK,IAAD,IAAU;AAC/B,gBAAI,CAACA,IAAL,EAAW;AACPZ,wBAAQM,YAAR;AACA;AACH;;AAEDL,mBAAO,IAAIY,KAAJ,CAAW,YAAYf,GAAK,sBAAsBc,IAAM,EAAxD,CAAP;AACH,SAPD;AAQH,KAjBM,CAAP;AAkBH","file":"childProcess.js","sourcesContent":["import { spawn } from 'child_process';\nimport Promise from 'bluebird';\n\nconst SPACE = ' ';\n\n/**\n * Runs continuous shell process\n * @param {String} cmd Shell command\n * @return {Promise<process>}\n */\nexport function runProcess(cmd) {\n    return new Promise((resolve, reject) => {\n        const commands = cmd.split(SPACE);\n        const [app, ...args] = commands;\n        const childProcess = spawn(app, args);\n\n        childProcess.on('error', (err) => {\n            reject(err);\n        });\n\n        process.nextTick(() => {\n            resolve(childProcess);\n        });\n    });\n}\n\n/**\n * Runs shell command\n * @param {String} cmd Shell command\n * @return {Promise<process>}\n */\nexport function runCommand(cmd) {\n    return new Promise((resolve, reject) => {\n        const commands = cmd.split(SPACE);\n        const [app, ...args] = commands;\n        const childProcess = spawn(app, args, { stdio: 'ignore' });\n\n        childProcess.on('error', (err) => {\n            reject(err);\n        });\n\n        childProcess.on('close', (code) => {\n            if (!code) {\n                resolve(childProcess);\n                return;\n            }\n\n            reject(new Error(`Command '${ cmd }' exited with code ${ code }`));\n        });\n    });\n}\n"]}