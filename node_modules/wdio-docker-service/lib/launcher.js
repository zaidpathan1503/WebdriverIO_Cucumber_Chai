'use strict';

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _docker = require('./utils/docker');

var _docker2 = _interopRequireDefault(_docker);

var _getFilePath = require('./utils/getFilePath');

var _getFilePath2 = _interopRequireDefault(_getFilePath);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_LOG_FILENAME = 'docker-log.txt';

class DockerLauncher {
    constructor() {
        this.logToStdout = false;
        this.docker = null;
        this.dockerLogs = null;
    }

    onPrepare(config) {
        this.logToStdout = config.logToStdout;
        this.dockerLogs = config.dockerLogs;

        const {
            debug,
            coloredLogs,
            dockerOptions: {
                args,
                command,
                healthCheck,
                image,
                options
            },
            onDockerReady
        } = config;

        if (!image) {
            return _bluebird2.default.reject(new Error('dockerOptions.image is a required property'));
        }

        const Logger = coloredLogs ? require('./utils/colorLogger') : console;

        this.docker = new _docker2.default(image, {
            args,
            command,
            debug,
            healthCheck,
            options
        }, Logger);

        if (typeof this.dockerLogs === 'string') {
            this.docker.once('processCreated', () => {
                this._redirectLogStream();
            });
        }

        return this.docker.run().then(() => {
            if (typeof onDockerReady === 'function') {
                onDockerReady();
            }
        }).catch(err => {
            debug && Logger.error(`Failed to run container: ${err.message}`);
        });
    }

    onComplete() {
        if (this.docker) {
            return this.docker.stop();
        }
    }

    _redirectLogStream() {
        const logFile = (0, _getFilePath2.default)(this.dockerLogs, DEFAULT_LOG_FILENAME);

        // ensure file & directory exists
        _fsExtra2.default.ensureFileSync(logFile);

        const logStream = _fsExtra2.default.createWriteStream(logFile, { flags: 'w' });

        this.docker.process.stdout.pipe(logStream);
        this.docker.process.stderr.pipe(logStream);
    }
}

module.exports = DockerLauncher;
//# sourceMappingURL=launcher.js.map